import os
import json
import logging
import asyncio
import threading

from django.conf import settings
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.contrib.auth import authenticate, login, logout
from django.urls import reverse
from django.views.decorators.csrf import csrf_exempt
from django.http import JsonResponse

from django.contrib.auth.models import User
from django.contrib.auth.tokens import default_token_generator
from django.contrib.admin.views.decorators import staff_member_required

from aiogram import Bot
from aiogram.types import FSInputFile

# –ò–º–ø–æ—Ä—Ç —Ñ–æ—Ä–º –∏ –º–æ–¥–µ–ª–µ–π

from .forms import RegistrationForm, OrderForm, ReviewForm
from .models import Product, CartItem, Order, OrderItem, Review

logger = logging.getLogger(__name__)

# -------------------------------------------
# 1. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ settings.py
# -------------------------------------------
BOT_TOKEN = getattr(settings, "BOT_TOKEN")
if not BOT_TOKEN or ":" not in BOT_TOKEN:
    # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –ø—É—Å—Ç–æ–π –∏–ª–∏ —è–≤–Ω–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É,
    # –≤—ã–∑—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ª—É—á–∏—Ç—å TokenValidationError
    raise ValueError("BOT_TOKEN is invalid or missing in settings.py!")

bot = Bot(token=BOT_TOKEN)

# –°–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π event loop
loop = asyncio.new_event_loop()

def _start_loop(loop):
    """–ó–∞–ø—É—Å–∫–∞–µ–º event loop –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã –æ–Ω –∂–∏–ª –≤—Å—ë –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    asyncio.set_event_loop(loop)
    loop.run_forever()

# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ —Å event loop (daemon=True, —á—Ç–æ–±—ã –ø–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∞–ª—Å—è –≤–º–µ—Å—Ç–µ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º)
thread = threading.Thread(target=_start_loop, args=(loop,), daemon=True)
thread.start()

def run_in_loop(coro):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ—Ä—É—Ç–∏–Ω—É –≤ —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—â–µ–º (–≥–ª–æ–±–∞–ª—å–Ω–æ–º) event loop.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç Future (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç).
    """
    return asyncio.run_coroutine_threadsafe(coro, loop)

async def send_order_to_telegram_async(order):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ –≤ Telegram."""
    try:
        # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π chat_id (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–∞—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
        chat_id = "5285694652"
        caption = (
            f"üéâ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*\n\n"
            f"üë§ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å*: {order.user.username}\n"
            f"üí∞ *–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞*: {order.total_price} —Ä—É–±.\n"
            f"üìÖ *–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞*: {order.created_at.strftime('%d.%m.%Y %H:%M')}"
            f"üìç *–ê–¥—Ä–µ—Å*: {order.delivery_address}"
            f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω*: {order.phone_number}"
            f"‚è∞ *–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏*: {order.delivery_time}"
            f"–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {order.delivery_date}"


        )
        await bot.send_message(chat_id, caption, parse_mode="Markdown")
        logger.info("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")


def home(request):
    return render(request, 'app/home.html')


def catalog(request):
    products = Product.objects.filter(available=True)
    return render(request, 'app/catalog.html', {'products': products})


def product_detail(request, pk):
    product = get_object_or_404(Product, pk=pk, available=True)
    recommended_products = Product.objects.filter(available=True).exclude(pk=pk)[:4]
    return render(request, 'app/product_detail.html', {
        'product': product,
        'recommended_products': recommended_products,
    })


def add_to_cart(request, product_id):
    if not request.user.is_authenticated:
        messages.error(request, "–í–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É.")
        return redirect(f"{reverse('app:login')}?next={request.path}")

    product = get_object_or_404(Product, id=product_id, available=True)

    try:
        product_stock = int(product.stock)
    except ValueError:
        messages.error(request, f"–û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ '{product.name}' –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return redirect('app:catalog')

    cart_item, created = CartItem.objects.get_or_create(
        user=request.user,
        product=product,
        defaults={'price': product.price, 'quantity': 0}
    )

    if product_stock >= cart_item.quantity + 1:
        cart_item.quantity += 1
        cart_item.save()
        messages.success(request, f'–¢–æ–≤–∞—Ä "{product.name}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.')
    else:
        messages.warning(request, f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ "{product.name}" –Ω–∞ —Å–∫–ª–∞–¥–µ.')

    return redirect('app:cart')


@login_required
def cart_view(request):
    cart_items = CartItem.objects.filter(user=request.user).select_related('product')
    total_price = sum(item.subtotal() for item in cart_items)
    return render(request, 'shop/add_product.html', {
        'cart_items': cart_items,
        'total_price': total_price
    })


from aiogram import types
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from asgiref.sync import sync_to_async

# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è ADMIN_CHAT_ID –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:
ADMIN_CHAT_ID = "5285694652"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async def send_message_to_admin(message):
    await bot.send_message(ADMIN_CHAT_ID, message)

async def order_status_command(message: Message):
    orders = await sync_to_async(lambda: list(Order.objects.select_related('user').order_by("-created_at")))()
    if not orders:
        await message.answer("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.")
        return

    status_map = {
        'NEW': "üü° –ù–æ–≤—ã–π",
        'PROCESSING': "üîµ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
        'COMPLETED': "‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω",
        'CANCELLED': "‚ùå –û—Ç–º–µ–Ω—ë–Ω",
    }

    for order in orders:
        text = (
            f"üõí *–ó–∞–∫–∞–∑ ‚Ññ{order.id}* –æ—Ç {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order.user.username}\n"
            f"üí∞ –°—É–º–º–∞: {order.total_price} ‚ÇΩ\n"
            f"üìç –ê–¥—Ä–µ—Å: {order.delivery_address}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status_map.get(order.status, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
        )
        await message.answer(text, parse_mode="Markdown")





@login_required
def remove_from_cart(request, cart_item_id):
    cart_item = get_object_or_404(CartItem, id=cart_item_id, user=request.user)
    cart_item.delete()
    messages.success(request, f'–¢–æ–≤–∞—Ä ‚Äú{cart_item.product.name}‚Äù —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.')
    return redirect('app:cart')


@login_required
def checkout(request):
    cart_items = CartItem.objects.filter(user=request.user)
    if not cart_items.exists():
        messages.warning(request, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return redirect('app:catalog')

    total_price = sum(item.subtotal() for item in cart_items)
    logger.debug("–ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: %s, –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: %d, –û–±—â–∞—è —Å—É–º–º–∞: %s",
                 request.user.username, cart_items.count(), total_price)

    if request.method == 'POST':
        form = OrderForm(request.POST)
        if form.is_valid():
            logger.debug("–§–æ—Ä–º–∞ –∑–∞–∫–∞–∑–∞ –≤–∞–ª–∏–¥–Ω–∞.")
            try:
                order = form.save(commit=False)
                order.user = request.user
                order.total_price = total_price
                order.save()
                logger.debug("–ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ó–∞–∫–∞–∑ id: %s", order.id)
            except Exception as e:
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: %s", e)
                messages.error(request, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
                return redirect('app:checkout')

            # –°–æ–∑–¥–∞–Ω–∏–µ OrderItem –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
            for item in cart_items:
                try:
                    OrderItem.objects.create(
                        order=order,
                        product=item.product,
                        quantity=item.quantity,
                        price=item.price
                    )
                    logger.debug("OrderItem —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–æ–≤–∞—Ä–∞: %s (–∫–æ–ª-–≤–æ: %s)", item.product.name, item.quantity)
                except Exception as e:
                    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ OrderItem –¥–ª—è —Ç–æ–≤–∞—Ä–∞ %s: %s", item.product.name, e)
                    messages.error(request, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∑–∞–∫–∞–∑.")
                    return redirect('app:checkout')

            try:
                cart_items.delete()
                logger.debug("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")
            except Exception as e:
                logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã: %s", e)
                messages.error(request, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ—Ä–∑–∏–Ω—ã.")
                return redirect('app:checkout')

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
            try:
                run_in_loop(send_order_to_telegram_async(order))
                logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram.")
            except Exception as e:
                logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ –≤ Telegram: %s", e)

            messages.success(request, "–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!")
            return redirect('app:order_success')
        else:
            logger.warning("–§–æ—Ä–º–∞ –∑–∞–∫–∞–∑–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞: %s", form.errors)
            messages.error(request, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–µ.")
    else:
        form = OrderForm()

    return render(request, 'app/checkout.html', {
        'cart_items': cart_items,
        'total_price': total_price,
        'form': form
    })



@login_required
def order_success(request):
    return render(request, 'app/order_success.html')


def contacts(request):
    return render(request, 'app/contacts.html')


def login_view(request):
    from django.contrib.auth.forms import AuthenticationForm

    if request.user.is_authenticated:
        return redirect('app:home')

    if request.method == 'POST':
        form = AuthenticationForm(request, data=request.POST)
        if form.is_valid():
            user = form.get_user()
            login(request, user)
            next_url = request.GET.get('next') or 'app:home'
            return redirect(next_url)
        else:
            messages.error(request, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å.")
    else:
        form = AuthenticationForm()
    return render(request, 'app/login.html', {'form': form})


@login_required
def logout_view(request):
    logout(request)
    messages.info(request, "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.")
    return redirect('app:logout_success')


def register(request):
    if request.method == 'POST':
        form = RegistrationForm(request.POST)
        if form.is_valid():
            user = form.save()
            username = form.cleaned_data.get('username')
            raw_password = form.cleaned_data.get('password1')
            user = authenticate(username=username, password=raw_password)
            if user is not None:
                login(request, user)
                messages.success(request, f'–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}!')
                return redirect('shop:home')
    else:
        form = RegistrationForm()
    return render(request, 'app/register.html', {'form': form})


def password_reset(request):
    from django.contrib.auth.forms import PasswordResetForm
    from django.core.mail import send_mail
    from django.template.loader import render_to_string
    from django.utils.http import urlsafe_base64_encode
    from django.utils.encoding import force_bytes

    if request.method == 'POST':
        form = PasswordResetForm(request.POST)
        if form.is_valid():
            data = form.cleaned_data['email']
            associated_users = User.objects.filter(email=data)
            if associated_users.exists():
                for user in associated_users:
                    subject = "–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –Ω–∞ —Å–∞–π—Ç–µ Flower Shop"
                    email_template_name = "shop/password_reset_email.html"
                    c = {
                        "email": user.email,
                        "domain": request.META['HTTP_HOST'],
                        "site_name": "Flower Shop",
                        "uid": urlsafe_base64_encode(force_bytes(user.pk)),
                        "user": user,
                        "token": default_token_generator.make_token(user),
                        "protocol": 'https' if request.is_secure() else 'http',
                    }
                    email = render_to_string(email_template_name, c)
                    send_mail(subject, email, "admin@flowershop.com", [user.email], fail_silently=False)
                messages.success(request, '–ü–∏—Å—å–º–æ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –≤–∞—à email.')
                return redirect('app:password_reset_done')
            else:
                messages.error(request, '–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º email.')
    else:
        form = PasswordResetForm()
    return render(request, 'app/password_reset.html', {'form': form})


def password_reset_done(request):
    return render(request, 'app/password_reset_done.html')


def password_reset_confirm(request, uidb64, token):
    from django.contrib.auth.forms import SetPasswordForm
    from django.contrib.auth import get_user_model
    from django.utils.http import urlsafe_base64_decode
    from django.utils.encoding import force_str

    UserModel = get_user_model()
    try:
        uid = force_str(urlsafe_base64_decode(uidb64))
        user = UserModel.objects.get(pk=uid)
    except (TypeError, ValueError, OverflowError, UserModel.DoesNotExist):
        user = None

    if user is not None and default_token_generator.check_token(user, token):
        if request.method == 'POST':
            form = SetPasswordForm(user, request.POST)
            if form.is_valid():
                form.save()
                messages.success(request, '–í–∞—à –ø–∞—Ä–æ–ª—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω.')
                return redirect('app:password_reset_complete')
        else:
            form = SetPasswordForm(user)
        return render(request, 'app/password_reset_confirm.html', {'form': form})
    else:
        messages.error(request, '–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞.')
        return redirect('app:password_reset')


def password_reset_complete(request):
    return render(request, 'app/password_reset_complete.html')


def logout_success(request):
    return render(request, 'app/logout_success.html')


def leave_review(request):
    reviews = Review.objects.all().order_by('-created_at')

    if request.method == 'POST':
        if not request.user.is_authenticated:
            messages.error(request, "–¢–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç–∑—ã–≤—ã.")
            return redirect('app:reviews')
        form = ReviewForm(request.POST)
        if form.is_valid():
            review = form.save(commit=False)
            review.user = request.user
            review.save()
            messages.success(request, "–í–∞—à –æ—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
            return redirect('app:reviews')
    else:
        form = ReviewForm()

    return render(request, 'app/reviews.html', {'form': form, 'reviews': reviews})


@login_required
def order_history(request):
    orders = Order.objects.filter(user=request.user).order_by('-created_at')
    return render(request, 'app/order_history.html', {'orders': orders})


@staff_member_required
def analytics_view(request):
    from django.db.models import Sum
    from django.utils.timezone import now

    today = now().date()
    orders_today = Order.objects.filter(created_at__date=today)
    total_revenue_today = orders_today.aggregate(Sum('total_price'))['total_price__sum'] or 0
    total_orders_today = orders_today.count()

    total_revenue = Order.objects.aggregate(Sum('total_price'))['total_price__sum'] or 0
    total_orders = Order.objects.count()

    return render(request, 'app/analytics.html', {
        'orders_today': orders_today,
        'total_revenue_today': total_revenue_today,
        'total_orders_today': total_orders_today,
        'total_revenue': total_revenue,
        'total_orders': total_orders,
    })


@csrf_exempt
def send_order_to_bot(request):
    """
    –ü—Ä–∏–º–µ—Ä —Ä—É—á–Ω–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ API (–≤–Ω–µ—à–Ω–∏–π –∑–∞–ø—Ä–æ—Å).
    """
    if request.method == "POST":
        try:
            data = json.loads(request.body)
            bouquet_name = data.get("bouquet_name")
            price = data.get("price")
            delivery_date = data.get("delivery_date")
            image_path = data.get("image_path")

            logger.info(
                f"–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram: chat_id=5285694652, "
                f"bouquet_name={bouquet_name}, price={price}, "
                f"delivery_date={delivery_date}, image_path={image_path}"
            )

            async def _send_order():
                try:
                    if image_path:
                        photo = FSInputFile(image_path)
                        await bot.send_photo(
                            chat_id="5285694652",
                            photo=photo,
                            caption=(
                                f"üéâ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*\n\n"
                                f"üíê *–ë—É–∫–µ—Ç*: {bouquet_name}\n"
                                f"üí∞ *–¶–µ–Ω–∞*: {price} —Ä—É–±.\n"
                                f"üìÖ *–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏*: {delivery_date}"
                            ),
                            parse_mode="Markdown"
                        )
                    else:
                        await bot.send_message(
                            chat_id="5285694652",
                            text=(
                                f"üéâ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*\n\n"
                                f"üíê *–ë—É–∫–µ—Ç*: {bouquet_name}\n"
                                f"üí∞ *–¶–µ–Ω–∞*: {price} —Ä—É–±.\n"
                                f"üìÖ *–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏*: {delivery_date}"
                            ),
                            parse_mode="Markdown"
                        )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

            run_in_loop(_send_order())
            return JsonResponse({"status": "success", "message": "–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram."})
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return JsonResponse({"status": "error", "message": str(e)})
    else:
        return JsonResponse({"status": "error", "message": "–¢–æ–ª—å–∫–æ POST-–∑–∞–ø—Ä–æ—Å—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã."})


@login_required
def repeat_order(request, order_id):
    """
    –ö–æ–ø–∏—Ä—É–µ—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑; —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –≤–ª–∞–¥–µ–ª–µ—Ü –∑–∞–∫–∞–∑–∞
    original_order = get_object_or_404(Order, id=order_id, user=request.user)

    # –ö–æ–ø–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
    for item in original_order.order_items.all():
        # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –µ—Å—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω–µ, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ,
        # –∏–Ω–∞—á–µ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        cart_item, created = CartItem.objects.get_or_create(
            user=request.user,
            product=item.product,
            defaults={'price': item.price, 'quantity': 0}
        )
        if not created:
            cart_item.quantity += item.quantity
        else:
            cart_item.quantity = item.quantity
        cart_item.save()

    messages.success(request, "–¢–æ–≤–∞—Ä—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ—Ä–∑–∏–Ω—É.")
    return redirect('app:cart')


@login_required
def order_status(request, order_id):
    order = get_object_or_404(Order, id=order_id, user=request.user)
    return render(request, 'shop/order_status.html', {'order': order})


