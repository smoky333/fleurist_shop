import os
import sys
import logging
import asyncio
import django
from datetime import datetime
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import (
    Message,
    BotCommand,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
    FSInputFile,
)
from asgiref.sync import sync_to_async

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "flower_shop.settings")
django.setup()

from .models import Order, CartItem
from django.db.models import Sum, Count

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "7871114248:AAHpOr0l7R53OPjhYmvrXFa4xuUdnlsE7rQ"
ADMIN_CHAT_ID = "5285694652"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
from aiogram import Bot, Dispatcher

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(Command("start"))
async def start_command(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n"
        "–Ø –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–∫–∞–∑–∞—Ö. –û—Ñ–æ—Ä–º–∏ –∑–∞–∫–∞–∑ –Ω–∞ —Å–∞–π—Ç–µ, –∞ —è –ø—Ä–∏—à–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å—é–¥–∞.\n\n"
        "–î–ª—è —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help."
    )

# –ö–æ–º–∞–Ω–¥–∞ /help
@router.message(Command("help"))
async def help_command(message: Message):
    await message.answer(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/order_status ‚Äî –°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤ (–∞–¥–º–∏–Ω)\n"
        "/analytics ‚Äî –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤ (–∞–¥–º–∏–Ω)\n"
        "/test_order ‚Äî –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏)"
    )

# –ö–æ–º–∞–Ω–¥–∞ /order_status
@router.message(Command("order_status"))
async def order_status_command(message: Message):
    if str(message.chat.id) != ADMIN_CHAT_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É.")
        return

    orders = await sync_to_async(list)(
        Order.objects.select_related("user").order_by("-created_at")
    )
    if not orders:
        await message.answer("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        return

    status_map = {
        "NEW": "üü° –ù–æ–≤—ã–π",
        "PROCESSING": "üîµ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
        "COMPLETED": "‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω",
        "CANCELLED": "‚ùå –û—Ç–º–µ–Ω—ë–Ω",
    }

    for order in orders:
        text = (
            f"üõí –ó–∞–∫–∞–∑ ‚Ññ{order.id}\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {order.user.username}\n"
            f"üí∞ –°—É–º–º–∞: {order.total_price} ‚Ç¨\n"
            f"üìç –ê–¥—Ä–µ—Å: {order.delivery_address}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status_map.get(order.status, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
        )
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"repeat_order:{order.id}")]
            ]
        )
        await message.answer(text, reply_markup=keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /analytics
@router.message(Command("analytics"))
async def analytics_command(message: Message):
    if str(message.chat.id) != ADMIN_CHAT_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É.")
        return

    today = datetime.now().date()
    total_revenue = await sync_to_async(lambda: Order.objects.aggregate(Sum("total_price"))["total_price__sum"] or 0)()
    total_orders = await sync_to_async(lambda: Order.objects.count())()
    orders_today = await sync_to_async(lambda: list(Order.objects.filter(created_at__date=today)))()

    total_revenue_today = sum(order.total_price for order in orders_today)
    total_orders_today = len(orders_today)

    response = (
        f"üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞:\n"
        f"üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: {total_revenue} ‚Ç¨\n"
        f"üõç –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n"
        f"üìÖ –°–µ–≥–æ–¥–Ω—è –¥–æ—Ö–æ–¥: {total_revenue_today} ‚Ç¨\n"
        f"üì¶ –°–µ–≥–æ–¥–Ω—è –∑–∞–∫–∞–∑–æ–≤: {total_orders_today}\n"
    )
    await message.answer(response)

# Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑"
@router.callback_query(lambda callback: callback.data and callback.data.startswith("repeat_order:"))
async def repeat_order_callback(callback: CallbackQuery):
    try:
        order_id = int(callback.data.split(":")[1])
        order = await sync_to_async(lambda: Order.objects.filter(id=order_id).first())()
        if not order:
            await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        async def copy_order_to_cart():
            for item in order.order_items.all():
                cart_item, _ = CartItem.objects.get_or_create(
                    user=order.user,
                    product=item.product,
                    defaults={"price": item.price, "quantity": item.quantity},
                )
                cart_item.quantity += item.quantity
                cart_item.save()

        await sync_to_async(copy_order_to_cart)()
        await callback.answer("–¢–æ–≤–∞—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ—Ä–∑–∏–Ω—É.", show_alert=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.", show_alert=True)

# –ö–æ–º–∞–Ω–¥–∞ /test_order
@router.message(Command("test_order"))
async def test_order_command(message: Message):
    bouquet_name = "–†–æ–∑—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ"
    price = 35.00
    delivery_date = "30.12.2025"
    image_path = "media/products/test_bouquet.jpg"
    await send_order(message.chat.id, bouquet_name, price, delivery_date, image_path)

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞
async def send_order(chat_id: int, bouquet_name: str, price: float, delivery_date: str, image_path: str = None):
    try:
        if image_path and os.path.exists(image_path):
            photo = FSInputFile(image_path)
            await bot.send_photo(
                chat_id=chat_id,
                photo=photo,
                caption=f"üéâ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\nüíê {bouquet_name}\nüí∞ {price} ‚Ç¨\nüìÖ {delivery_date}",
            )
        else:
            await bot.send_message(
                chat_id=chat_id,
                text=f"üéâ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\nüíê {bouquet_name}\nüí∞ {price} ‚Ç¨\nüìÖ {delivery_date}",
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await bot.set_my_commands([
        BotCommand(command="/order_status", description="–°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤"),
        BotCommand(command="/analytics", description="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞"),
        BotCommand(command="/test_order", description="–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑"),
    ])
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
