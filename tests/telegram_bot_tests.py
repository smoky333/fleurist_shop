import asyncio
import os
import unittest
from unittest.mock import AsyncMock, patch
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –æ–±—ä–µ–∫—Ç—ã aiogram
from aiogram.types import BotCommand

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –≤–∞—à–µ–≥–æ –º–æ–¥—É–ª—è (–∑–∞–º–µ–Ω–∏—Ç–µ –ø—É—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
from app.views import (
    start_command,
    help_command,
    order_status_command,
    analytics_command,
    repeat_order_callback,
    send_order,
    test_order_command
)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –∏–∑ –≤–∞—à–µ–≥–æ –º–æ–¥—É–ª—è
ADMIN_CHAT_ID = "5285694652"


# –§–∏–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ aiogram

class FakeChat:
    def __init__(self, id):
        self.id = id

class FakeMessage:
    def __init__(self, chat_id, text=""):
        self.chat = FakeChat(chat_id)
        self.text = text
        self.answers = []
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º AsyncMock –¥–ª—è –º–µ—Ç–æ–¥–∞ answer, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤—ã–∑–æ–≤—ã
        self.answer = AsyncMock(side_effect=self._fake_answer)

    async def _fake_answer(self, text, **kwargs):
        self.answers.append((text, kwargs))

class FakeCallbackQuery:
    def __init__(self, data, chat_id):
        self.data = data
        # CallbackQuery —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–ª–æ–∂–µ–Ω–Ω–æ–µ message
        self.message = FakeMessage(chat_id)
        self.answer = AsyncMock()


# –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–¥–∏–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª–∞—Å—Å —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º–∏ —Ç–µ—Å—Ç–∞–º–∏
class TelegramBotTests(unittest.IsolatedAsyncioTestCase):

    async def test_start_command(self):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /start ‚Äì –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ—Ç–≤–µ—Ç —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º."""
        msg = FakeMessage(chat_id=12345)
        await start_command(msg)
        msg.answer.assert_called_once()
        sent_text = msg.answers[0][0]
        self.assertTrue(sent_text.startswith("–ü—Ä–∏–≤–µ—Ç! üëã"), "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '–ü—Ä–∏–≤–µ—Ç! üëã'")

    async def test_help_command(self):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /help ‚Äì –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è —Å–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è."""
        msg = FakeMessage(chat_id=12345)
        await help_command(msg)
        msg.answer.assert_called_once()
        sent_text = msg.answers[0][0]
        self.assertIn("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã", sent_text, "–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:'")

    async def test_order_status_command_non_admin(self):
        """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /order_status –¥–ª—è –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ‚Äì –æ–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–æ—Å—Ç—É–ø–∞."""
        msg = FakeMessage(chat_id=11111)  # –Ω–µ –∞–¥–º–∏–Ω
        await order_status_command(msg)
        msg.answer.assert_called_once_with("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É.")

    @patch("app.views.Order")
    async def test_order_status_command_no_orders(self, mock_order):
        """
        –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /order_status –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.
        –ü–∞—Ç—á–∏–º Order.objects.select_related().order_by() —Ç–∞–∫, —á—Ç–æ–±—ã –≤–æ–∑–≤—Ä–∞—â–∞–ª—Å—è –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.
        """
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º mock, —á—Ç–æ–±—ã –ø—Ä–∏ –≤—ã–∑–æ–≤–µ order_by() –≤–æ–∑–≤—Ä–∞—â–∞–ª—Å—è –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        mock_order.objects.select_related.return_value.order_by.return_value = []
        msg = FakeMessage(chat_id=int(ADMIN_CHAT_ID))
        await order_status_command(msg)
        # –û–∂–∏–¥–∞–µ–º, —á—Ç–æ –µ—Å–ª–∏ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç, –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ "–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤."
        msg.answer.assert_called_with("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")

    async def test_analytics_command_non_admin(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–ª—è –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞."""
        msg = FakeMessage(chat_id=11111)
        await analytics_command(msg)
        msg.answer.assert_called_once_with("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É.")

    @patch("app.views.Order")
    async def test_analytics_command_admin(self, mock_order):
        """
        –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /analytics –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
        –ü–∞—Ç—á–∏–º –∞–≥—Ä–µ–≥–∞—Ç–Ω—ã–µ –≤—ã–∑–æ–≤—ã –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.
        """
        msg = FakeMessage(chat_id=int(ADMIN_CHAT_ID))
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ç–æ–≤ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–∫–∞–∑–æ–≤
        mock_order.objects.aggregate.return_value = {"total_price__sum": 1000}
        mock_order.objects.count.return_value = 5
        # –î–ª—è orders_today ‚Äî –≤–µ—Ä–Ω–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ —Å –Ω—É–∂–Ω—ã–º–∏ total_price
        mock_order.objects.filter.return_value = []

        await analytics_command(msg)
        msg.answer.assert_called_once()
        sent_text = msg.answers[0][0]
        self.assertIn("1000", sent_text)
        self.assertIn("5", sent_text)

    async def test_repeat_order_callback_order_not_found(self):
        """–¢–µ—Å—Ç callback –¥–ª—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω."""
        callback = FakeCallbackQuery(data="repeat_order:999", chat_id=int(ADMIN_CHAT_ID))
        with patch("app.views.Order.objects.filter") as mock_filter:
            mock_filter.return_value.first.return_value = None
            await repeat_order_callback(callback)
            callback.answer.assert_called_once_with("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)

    @patch("app.views.os.path.exists", return_value=True)
    @patch("app.views.bot.send_photo", new_callable=AsyncMock)
    async def test_send_order_with_photo(self, mock_send_photo, mock_path_exists):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ send_order: –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω image_path –∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äì –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è send_photo."""
        await send_order(
            chat_id=int(ADMIN_CHAT_ID),
            bouquet_name="Test Bouquet",
            price=123.45,
            delivery_date="01.01.2025",
            image_path="dummy/path.jpg"
        )
        mock_send_photo.assert_called_once()

    @patch("app.views.bot.send_message", new_callable=AsyncMock)
    async def test_send_order_without_photo(self, mock_send_message):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ send_order: –µ—Å–ª–∏ image_path –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äì –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è send_message."""
        await send_order(
            chat_id=int(ADMIN_CHAT_ID),
            bouquet_name="Test Bouquet",
            price=123.45,
            delivery_date="01.01.2025",
            image_path=None
        )
        mock_send_message.assert_called_once()

    async def test_test_order_command(self):
        """
        –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã /test_order:
        –ü–∞—Ç—á–∏–º —Ñ—É–Ω–∫—Ü–∏—é send_order, —á—Ç–æ–±—ã —É–¥–æ—Å—Ç–æ–≤–µ—Ä–∏—Ç—å—Å—è, —á—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å –Ω—É–∂–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.
        """
        msg = FakeMessage(chat_id=int(ADMIN_CHAT_ID))
        with patch("app.views.send_order", new_callable=AsyncMock) as mock_send_order:
            await test_order_command(msg)
            mock_send_order.assert_called_once_with(
                msg.chat.id,
                "–†–æ–∑—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ",
                35.0,
                "30.12.2025",
                "media/products/test_bouquet.jpg"
            )


if __name__ == "__main__":
    unittest.main()
